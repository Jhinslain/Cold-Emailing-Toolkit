const { spawn } = require('child_process');
const readline = require('readline');
const path = require('path');
const fs = require('fs');

console.log('üåê Traitement des domaines valides');
console.log('==================================\n');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

async function askQuestion(question) {
    return new Promise((resolve) => {
        rl.question(question, (answer) => {
            resolve(answer.toLowerCase());
        });
    });
}

async function main() {
    try {
        console.log('Choisissez une option:');
        console.log('0. üì• T√©l√©charger l\'Opendata Afnic et l\'extraire');
        console.log('1. üìÖ T√©l√©charger les fichiers quotidiens (7 derniers jours)');
        console.log('2. üöÄ Traitement des domaines valides (Opendata Afnic)');
        console.log('3. üìä Lancement de l\'analyse d√©taill√©e');
        console.log('4. üìÖ Filtrer par date d\'achat');
        console.log('5. üó∫Ô∏è Filtrer par localisation');
        console.log('6. üîç Extraction emails + num√©ros [WHOIS]');
        console.log('7. üåê Extraction emails + num√©ros [WHOIS + Scrap]');
        console.log('8. ‚ùå Quitter\n');

        const choice = await askQuestion('Votre choix (0-8): ');

        switch (choice) {
            case '0':
                console.log('\nüì• Lancement du t√©l√©chargement de l\'Opendata...\n');
                await downloadAndExtractOpendata();
                break;
                
            case '1':
                console.log('\nüìÖ Lancement du t√©l√©chargement des fichiers quotidiens...\n');
                await downloadDailyFiles();
                break;
                
            case '2':
                console.log('\nüöÄ Lancement du traitement des domaines valides...\n');
                console.log('üìã Ce traitement filtre les domaines .fr de l\'opendata AFNIC');
                console.log('üìÖ Il traite les domaines plus anciens (opendata mensuel)');
                console.log('‚úÖ Il garde seulement les domaines actifs (sans date de retrait)\n');
                runScript('domain_valide.cjs');
                break;
                
            case '3':
                console.log('\nüìä Lancement de l\'analyse d√©taill√©e...\n');
                runScript('analyze_file.cjs');
                break;
                
            case '4':
                console.log('\nüìÖ Lancement du filtrage par date...\n');
                await filterByDateWithPeriod();
                break;
                
            case '5':
                console.log('\nüó∫Ô∏è Lancement du filtrage par localisation...\n');
                await filterByLocationWithChoice();
                break;
                
            case '6':
                console.log('\nüîç Lancement de l\'extraction emails WHOIS uniquement...\n');
                await processDomainsWHOISOnly();
                break;
                
            case '7':
                console.log('\nüåê Lancement de l\'extraction WHOIS + Scrap...\n');
                await processDomainsWHOISAndScrap();
                break;
                
            case '8':
                console.log('üëã Au revoir!');
                rl.close();
                process.exit(0);
                break;
                
            default:
                console.log('‚ùå Choix invalide. Veuillez choisir 0, 1, 2, 3, 4, 5, 6, 7 ou 8.');
                main();
                break;
        }
    } catch (error) {
        console.error('‚ùå Erreur:', error);
        rl.close();
        process.exit(1);
    }
}

// Nouvelle fonction pour l'extraction WHOIS uniquement
async function processDomainsWHOISOnly() {
    try {
        console.log('üîç Extraction des emails WHOIS uniquement');
        console.log('========================================\n');
        
        // Cr√©er le dossier input s'il n'existe pas
        const inputDir = path.join(__dirname, '..', 'input');
        if (!fs.existsSync(inputDir)) {
            fs.mkdirSync(inputDir, { recursive: true });
            console.log('üìÅ Dossier input cr√©√©');
        }
        
        // Lister les fichiers CSV dans le dossier input
        const inputFiles = fs.readdirSync(inputDir)
            .filter(file => file.toLowerCase().endsWith('.csv'))
            .map(file => path.join(inputDir, file));
        
        if (inputFiles.length === 0) {
            console.log('‚ùå Aucun fichier CSV trouv√© dans le dossier input/');
            console.log('üí° Veuillez placer votre fichier CSV dans le dossier input/');
            return;
        }
        
        // Si plusieurs fichiers CSV, demander √† l'utilisateur de choisir
        let inputFile;
        if (inputFiles.length === 1) {
            inputFile = inputFiles[0];
            console.log('üìÅ Fichier d\'entr√©e d√©tect√©:', path.basename(inputFile));
        } else {
            console.log('üìÅ Fichiers CSV disponibles dans input/:');
            inputFiles.forEach((file, index) => {
                console.log(`${index + 1}. ${path.basename(file)}`);
            });
            
            const choice = await askQuestion(`\nChoisissez le fichier (1-${inputFiles.length}): `);
            const fileIndex = parseInt(choice) - 1;
            
            if (fileIndex < 0 || fileIndex >= inputFiles.length) {
                console.log('‚ùå Choix invalide');
                return;
            }
            
            inputFile = inputFiles[fileIndex];
            console.log('üìÅ Fichier d\'entr√©e s√©lectionn√©:', path.basename(inputFile));
        }
        
        // Cr√©er le dossier output s'il n'existe pas
        const outputDir = path.join(__dirname, '..', 'output');
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
            console.log('üìÅ Dossier output cr√©√©');
        }
        
        // Utiliser le nom du fichier d'entr√©e avec le suffixe _whois.csv
        const inputFileName = path.basename(inputFile, '.csv');
        const outputFileName = `${inputFileName}_whois.csv`;
        const outputFile = path.join(outputDir, outputFileName);
        console.log('üìÅ Fichier de sortie utilis√©:', outputFileName);
        
        // Utiliser automatiquement "Nom de domaine" comme colonne par d√©faut
        const domainColumn = 'Nom de domaine';
        console.log('üìã Colonne des domaines utilis√©e:', domainColumn);
        
        console.log('\nüöÄ Lancement du traitement WHOIS uniquement...\n');
        
        // Lancer le script process_csv_domains.cjs avec le mode WHOIS uniquement (d√©lai = 0)
        runScript('process_csv_domains.cjs', [inputFile, outputFile, domainColumn, '0', 'whois-only']);
        
    } catch (error) {
        console.error('‚ùå Erreur lors du traitement:', error.message);
        rl.close();
        process.exit(1);
    }
}

// Nouvelle fonction pour l'extraction WHOIS + Scrap
async function processDomainsWHOISAndScrap() {
    try {
        console.log('üåê Extraction WHOIS + Scrap des domaines');
        console.log('=======================================\n');
        
        // Utiliser automatiquement le fichier domaines_filtres_100_lignes.csv
        const inputFile = path.join(__dirname, '..', 'output', 'domaines_filtres_100_lignes.csv');
        
        if (!fs.existsSync(inputFile)) {
            console.log('‚ùå Fichier d\'entr√©e non trouv√©:', inputFile);
            console.log('Veuillez d\'abord ex√©cuter le filtrage par date (option 5)');
            return;
        }
        
        console.log('üìÅ Fichier d\'entr√©e utilis√©:', inputFile);
        
        // Utiliser automatiquement le fichier de sortie domaines_filtres_whois_scrap.csv
        const outputFile = path.join(__dirname, '..', 'output', 'domaines_filtres_whois_scrap.csv');
        console.log('üìÅ Fichier de sortie utilis√©:', outputFile);
        
        // Utiliser automatiquement "Nom de domaine" comme colonne par d√©faut
        const domainColumn = 'Nom de domaine';
        console.log('üìã Colonne des domaines utilis√©e:', domainColumn);
        
        console.log('\nüöÄ Lancement du traitement WHOIS + Scrap...\n');
        
        // Lancer le script process_csv_domains.cjs avec le mode WHOIS + Scrap (d√©lai = 0)
        runScript('process_csv_domains.cjs', [inputFile, outputFile, domainColumn, '0', 'full']);
        
    } catch (error) {
        console.error('‚ùå Erreur lors du traitement:', error.message);
        rl.close();
        process.exit(1);
    }
}

function runScript(scriptName, args = []) {
    const scriptPath = path.join(__dirname, scriptName);
    const child = spawn('node', [scriptPath, ...args], {
        stdio: 'inherit',
        cwd: path.dirname(__dirname)
    });

    child.on('close', (code) => {
        console.log(`\n‚úÖ Script ${scriptName} termin√© avec le code: ${code}`);
        rl.close();
        process.exit(code);
    });

    child.on('error', (error) => {
        console.error(`‚ùå Erreur lors de l'ex√©cution de ${scriptName}:`, error);
        rl.close();
        process.exit(1);
    });
}

// Fonction pour t√©l√©charger et extraire l'Opendata Afnic
async function downloadAndExtractOpendata() {
    try {
        const StreamZip = require('node-stream-zip');
        
        // Fonction pour calculer un mois sp√©cifique
        function getMonthYYYYMM(monthsAgo = 1) {
            const now = new Date();
            now.setDate(1); // Pour √©viter les probl√®mes de fin de mois
            now.setMonth(now.getMonth() - monthsAgo);
            const y = now.getFullYear();
            const m = String(now.getMonth() + 1).padStart(2, '0');
            return `${y}${m}`;
        }
        
        // Fonction pour essayer de t√©l√©charger un mois sp√©cifique
        async function tryDownloadMonth(month) {
            const zipName = `${month}_OPENDATA_A-NomsDeDomaineEnPointFr.zip`;
            const zipPath = path.join(dataDir, zipName);
            
            // V√©rifier si le fichier existe d√©j√†
            if (fs.existsSync(zipPath)) {
                console.log('üì¶ Archive d√©j√† pr√©sente ‚Üí', zipPath);
                return zipPath;
            }
            
            // T√©l√©charger le fichier
            const url = `https://www.afnic.fr/wp-media/ftp/documentsOpenData/${zipName}`;
            console.log(`‚¨áÔ∏è Tentative de t√©l√©chargement pour ${month}:`, url);
            
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`T√©l√©chargement KO (${response.status}) - ${url}`);
            }
            
            const buffer = Buffer.from(await response.arrayBuffer());
            fs.writeFileSync(zipPath, buffer);
            console.log('‚úÖ Archive t√©l√©charg√©e ‚Üí', zipPath);
            return zipPath;
        }
        
        // Cr√©er le dossier data s'il n'existe pas
        const dataDir = path.join(__dirname, '..', 'data');
        if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
            console.log('üìÅ Dossier data cr√©√©');
        }
        
        // Demander √† l'utilisateur s'il veut choisir manuellement le mois
        console.log('üìÖ S√©lection du mois pour l\'opendata AFNIC');
        console.log('===========================================\n');
        console.log('1. üîÑ Automatique (essai des 3 derniers mois disponibles)');
        console.log('2. üìù Manuel (choisir le mois)');
        
        const choice = await askQuestion('Votre choix (1-2): ');
        
        let zipPath;
        
        if (choice === '2') {
            // Mode manuel
            const monthInput = await askQuestion('üìÖ Entrez le mois au format YYYYMM (ex: 202505): ');
            if (!/^\d{6}$/.test(monthInput)) {
                console.log('‚ùå Format invalide. Utilisez YYYYMM (ex: 202505)');
                return;
            }
            
            try {
                zipPath = await tryDownloadMonth(monthInput);
            } catch (error) {
                console.log(`‚ùå Impossible de t√©l√©charger ${monthInput}: ${error.message}`);
                return;
            }
        } else {
            // Mode automatique - essayer les 3 derniers mois
            console.log('\nüîÑ Essai automatique des 3 derniers mois disponibles...\n');
            
            for (let i = 1; i <= 3; i++) {
                const month = getMonthYYYYMM(i);
                console.log(`üìÖ Tentative ${i}/3: ${month}`);
                
                try {
                    zipPath = await tryDownloadMonth(month);
                    console.log(`‚úÖ Succ√®s avec le mois ${month}`);
                    break;
                } catch (error) {
                    console.log(`‚ùå √âchec pour ${month}: ${error.message}`);
                    if (i === 3) {
                        console.log('\n‚ùå Aucun des 3 derniers mois n\'est disponible.');
                        console.log('üí° Essayez le mode manuel avec un mois plus ancien (ex: 202504, 202503)');
                        return;
                    }
                }
            }
        }
        
        // Extraire le CSV
        console.log('üìÇ Extraction du CSV...');
        const zip = new StreamZip.async({ file: zipPath });
        const entries = await zip.entries();
        
        // Chercher le fichier CSV dans l'archive
        const csvEntry = Object.values(entries).find((e) => /\.csv$/i.test(e.name));
        if (!csvEntry) {
            throw new Error('CSV introuvable dans l\'archive');
        }
        
        // Extraire le CSV sous le nom data_extrait.csv
        const csvExtractPath = path.join(dataDir, 'data_extrait.csv');
        await zip.extract(csvEntry.name, csvExtractPath);
        await zip.close();
        
        console.log('‚úÖ CSV extrait ‚Üí', csvExtractPath);
        
        // Afficher les statistiques du fichier extrait
        const stats = fs.statSync(csvExtractPath);
        const fileSizeMB = (stats.size / 1024 / 1024).toFixed(2);
        console.log(`üìè Taille du fichier extrait: ${fileSizeMB} MB`);
        
        // Compter les lignes
        console.log('üìä Comptage des lignes...');
        const lineCount = await countLines(csvExtractPath);
        console.log(`üìä Nombre de lignes: ${lineCount.toLocaleString()}`);
        
        console.log('üéâ T√©l√©chargement et extraction termin√©s avec succ√®s!');
        rl.close();
        
    } catch (error) {
        console.error('‚ùå Erreur lors du t√©l√©chargement/extraction:', error.message);
        rl.close();
        process.exit(1);
    }
}

// Fonction pour compter les lignes d'un fichier
async function countLines(filePath) {
    return new Promise((resolve, reject) => {
        let lineCount = 0;
        const rl = readline.createInterface({
            input: fs.createReadStream(filePath),
            crlfDelay: Infinity
        });
        
        rl.on('line', () => {
            lineCount++;
        });
        
        rl.on('close', () => {
            resolve(lineCount);
        });
        
        rl.on('error', reject);
    });
}

// Nouvelle fonction pour le filtrage par date avec choix de p√©riode
async function filterByDateWithPeriod() {
    try {
        console.log('üìÖ Filtrage des domaines par p√©riode sp√©cifique');
        console.log('===============================================\n');
        
        console.log('üìÖ Format des dates: DD-MM-YYYY (ex: 26-05-2025)');
        console.log('üí° L\'ordre des dates n\'importe pas\n');
        
        // Demander la premi√®re date
        const firstDate = await askQuestion('üìÖ Premi√®re date (DD-MM-YYYY): ');
        
        if (!firstDate || !/^\d{2}-\d{2}-\d{4}$/.test(firstDate)) {
            console.log('‚ùå Format de date invalide. Utilisez DD-MM-YYYY (ex: 26-05-2025)');
            return;
        }
        
        // Demander la deuxi√®me date
        const secondDate = await askQuestion('üìÖ Deuxi√®me date (DD-MM-YYYY): ');
        
        if (!secondDate || !/^\d{2}-\d{2}-\d{4}$/.test(secondDate)) {
            console.log('‚ùå Format de date invalide. Utilisez DD-MM-YYYY (ex: 30-05-2025)');
            return;
        }
        
        console.log(`\n‚úÖ Filtrage configur√© entre ${firstDate} et ${secondDate}`);
        console.log('üîÑ Lancement du filtrage...\n');
        
        // Lancer le script filter_by_date.cjs avec les deux dates
        runScript('filter_by_date.cjs', [firstDate, secondDate]);
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la configuration du filtrage:', error.message);
        rl.close();
        process.exit(1);
    }
}

// Fonction pour t√©l√©charger les fichiers quotidiens des 7 derniers jours
async function downloadDailyFiles() {
    try {
        console.log('üìÖ T√©l√©chargement des fichiers quotidiens AFNIC');
        console.log('==============================================\n');
        
        // Demander le type de t√©l√©chargement
        console.log('Choisissez le type de t√©l√©chargement:');
        console.log('1. üìÖ Hier uniquement');
        console.log('2. üìä 7 derniers jours (sans aujourd\'hui)');
        console.log('3. üìÖ Jour sp√©cifique (1-7 jours en arri√®re)\n');
        
        const downloadChoice = await askQuestion('Votre choix (1-3): ');
        
        if (!['1', '2', '3'].includes(downloadChoice)) {
            console.log('‚ùå Choix invalide. Veuillez choisir 1, 2 ou 3.');
            return;
        }
        
        // Cr√©er le dossier data s'il n'existe pas
        const dataDir = path.join(__dirname, '..', 'data');
        if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
            console.log('üìÅ Dossier data cr√©√©');
        }
        
        // Fonction pour g√©n√©rer la date au format YYYYMMDD
        function getDateYYYYMMDD(daysAgo = 0) {
            const date = new Date();
            date.setDate(date.getDate() - daysAgo);
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}${month}${day}`;
        }
        
        // Fonction pour t√©l√©charger un fichier quotidien
        async function downloadDailyFile(dateYYYYMMDD) {
            const fileName = `${dateYYYYMMDD}_CREA_fr.txt`;
            const filePath = path.join(dataDir, fileName);
            const url = `https://www.afnic.fr/wp-media/ftp/domaineTLD_Afnic/${fileName}`;
            
            // V√©rifier si le fichier existe d√©j√†
            if (fs.existsSync(filePath)) {
                const stats = fs.statSync(filePath);
                const fileSizeKB = (stats.size / 1024).toFixed(2);
                console.log(`üìÅ Fichier d√©j√† pr√©sent: ${fileName} - ${fileSizeKB} KB`);
                return { success: true, fileName, fileSizeKB, alreadyExists: true };
            }
            
            console.log(`‚¨áÔ∏è T√©l√©chargement: ${fileName}`);
            
            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const buffer = Buffer.from(await response.arrayBuffer());
                fs.writeFileSync(filePath, buffer);
                
                const fileSizeKB = (buffer.length / 1024).toFixed(2);
                console.log(`‚úÖ T√©l√©charg√©: ${fileName} - ${fileSizeKB} KB`);
                
                return { success: true, fileName, fileSizeKB, alreadyExists: false };
            } catch (error) {
                console.log(`‚ùå √âchec: ${fileName} - ${error.message}`);
                return { success: false, fileName, error: error.message };
            }
        }
        
        // Fonction pour extraire les domaines d'un fichier TXT
        async function extractDomainsFromFile(filePath, dateYYYYMMDD) {
            try {
                console.log(`üìã Extraction des domaines de ${dateYYYYMMDD}...`);
                
                const content = fs.readFileSync(filePath, 'utf8');
                const lines = content.split('\n');
                
                const domains = [];
                let inDataSection = false;
                
                for (const line of lines) {
                    const trimmedLine = line.trim();
                    
                    // D√©tecter le d√©but des donn√©es (apr√®s #BOF)
                    if (trimmedLine === '#BOF') {
                        inDataSection = true;
                        continue;
                    }
                    
                    // D√©tecter la fin des donn√©es (avant #EOF)
                    if (trimmedLine === '#EOF') {
                        break;
                    }
                    
                    // Si on est dans la section des donn√©es et que la ligne n'est pas vide
                    if (inDataSection && trimmedLine && !trimmedLine.startsWith('#')) {
                        domains.push(trimmedLine);
                    }
                }
                
                // Sauvegarder la liste des domaines dans un fichier CSV
                const domainsFileName = `${dateYYYYMMDD}_domains.csv`;
                const domainsFilePath = path.join(dataDir, domainsFileName);
                
                // Cr√©er le contenu CSV avec en-t√™te
                const csvContent = 'Nom de domaine\n' + domains.map(domain => domain).join('\n');
                fs.writeFileSync(domainsFilePath, csvContent, 'utf8');
                
                console.log(`‚úÖ ${domains.length.toLocaleString()} domaines extraits ‚Üí ${domainsFileName}`);
                
                return { 
                    success: true, 
                    domainCount: domains.length, 
                    domainsFileName,
                    domains: domains 
                };
                
            } catch (error) {
                console.log(`‚ùå Erreur lors de l'extraction des domaines: ${error.message}`);
                return { success: false, error: error.message };
            }
        }
        
        // D√©terminer le nombre de jours √† t√©l√©charger selon le choix
        let daysToDownload = 1; // Par d√©faut hier uniquement
        let startDay = 1; // Commencer par hier (1 jour en arri√®re)
        let periodText = 'hier uniquement';
        
        if (downloadChoice === '2') {
            daysToDownload = 7; // 7 derniers jours
            startDay = 1; // Commencer par hier (sans aujourd'hui)
            periodText = '7 derniers jours (sans aujourd\'hui)';
        } else if (downloadChoice === '3') {
            // Jour sp√©cifique (1-7 jours en arri√®re)
            const customDays = await askQuestion('üìÖ Combien de jours en arri√®re (1-7): ');
            const daysNum = parseInt(customDays);
            
            if (isNaN(daysNum) || daysNum < 1 || daysNum > 7) {
                console.log('‚ùå Nombre de jours invalide. Veuillez choisir entre 1 et 7.');
                return;
            }
            
            daysToDownload = 1; // Un seul jour
            startDay = daysNum; // Le jour sp√©cifique en arri√®re
            periodText = `jour il y a ${daysNum} jour(s)`;
        }
        
        console.log(`üîÑ T√©l√©chargement de ${periodText}...\n`);
        
        const results = [];
        let totalSize = 0;
        let downloadedCount = 0;
        let alreadyExistsCount = 0;
        let failedCount = 0;
        
        // T√©l√©charger selon le choix
        for (let i = startDay; i < startDay + daysToDownload; i++) {
            const dateYYYYMMDD = getDateYYYYMMDD(i);
            const result = await downloadDailyFile(dateYYYYMMDD);
            results.push(result);
            
            if (result.success) {
                if (result.alreadyExists) {
                    alreadyExistsCount++;
                    totalSize += parseFloat(result.fileSizeKB);
                } else {
                    downloadedCount++;
                    totalSize += parseFloat(result.fileSizeKB);
                }
                
                // Extraire les domaines du fichier t√©l√©charg√©
                const filePath = path.join(dataDir, result.fileName);
                const extractionResult = await extractDomainsFromFile(filePath, dateYYYYMMDD);
                
                if (extractionResult.success) {
                    console.log(`üìä ${extractionResult.domainCount.toLocaleString()} domaines trait√©s pour ${dateYYYYMMDD}`);
                }
            } else {
                failedCount++;
            }
            
            // Petit d√©lai entre les t√©l√©chargements pour √©viter de surcharger le serveur
            if (i < startDay + daysToDownload - 1) {
                await new Promise(resolve => setTimeout(resolve, 500));
            }
        }
        
        console.log('\nüìä R√©sum√© du t√©l√©chargement:');
        console.log('============================');
        console.log(`üìÖ P√©riode: ${periodText}`);
        console.log(`‚úÖ Fichiers t√©l√©charg√©s: ${downloadedCount}`);
        console.log(`üìÅ Fichiers d√©j√† pr√©sents: ${alreadyExistsCount}`);
        console.log(`‚ùå √âchecs: ${failedCount}`);
        console.log(`üìè Taille totale: ${totalSize.toFixed(2)} KB`);
        
        if (downloadedCount > 0 || alreadyExistsCount > 0) {
            console.log('\nüìÅ Fichiers disponibles dans le dossier data/');
            console.log('üí° Vous pouvez maintenant utiliser ces fichiers pour vos traitements');
        }
        
        if (failedCount > 0) {
            console.log('\n‚ö†Ô∏è Certains fichiers n\'ont pas pu √™tre t√©l√©charg√©s');
            console.log('üí° Cela peut √™tre normal si les fichiers ne sont pas encore disponibles');
        }
        
        console.log('\nüéâ T√©l√©chargement termin√©!');
        rl.close();
        
    } catch (error) {
        console.error('‚ùå Erreur lors du t√©l√©chargement:', error.message);
        rl.close();
        process.exit(1);
    }
}

// Nouvelle fonction pour le filtrage par localisation avec choix
async function filterByLocationWithChoice() {
    try {
        console.log('üó∫Ô∏è Filtrage des domaines par localisation');
        console.log('==========================================\n');
        
        // Cr√©er le dossier input s'il n'existe pas
        const inputDir = path.join(__dirname, '..', 'input');
        if (!fs.existsSync(inputDir)) {
            fs.mkdirSync(inputDir, { recursive: true });
            console.log('üìÅ Dossier input cr√©√©');
        }
        
        // Lister les fichiers CSV dans le dossier input
        const inputFiles = fs.readdirSync(inputDir)
            .filter(file => file.toLowerCase().endsWith('.csv'))
            .map(file => path.join(inputDir, file));
        
        if (inputFiles.length === 0) {
            console.log('‚ùå Aucun fichier CSV trouv√© dans le dossier input/');
            console.log('üí° Veuillez placer votre fichier CSV dans le dossier input/');
            return;
        }
        
        // Si plusieurs fichiers CSV, demander √† l'utilisateur de choisir
        let inputFile;
        if (inputFiles.length === 1) {
            inputFile = inputFiles[0];
            console.log('üìÅ Fichier d\'entr√©e d√©tect√©:', path.basename(inputFile));
        } else {
            console.log('üìÅ Fichiers CSV disponibles dans input/:');
            inputFiles.forEach((file, index) => {
                console.log(`${index + 1}. ${path.basename(file)}`);
            });
            
            const choice = await askQuestion(`\nChoisissez le fichier (1-${inputFiles.length}): `);
            const fileIndex = parseInt(choice) - 1;
            
            if (fileIndex < 0 || fileIndex >= inputFiles.length) {
                console.log('‚ùå Choix invalide');
                return;
            }
            
            inputFile = inputFiles[fileIndex];
            console.log('üìÅ Fichier d\'entr√©e s√©lectionn√©:', path.basename(inputFile));
        }
        
        // Cr√©er le dossier output s'il n'existe pas
        const outputDir = path.join(__dirname, '..', 'output');
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
            console.log('üìÅ Dossier output cr√©√©');
        }
        
        // Demander le type de filtrage
        console.log('\nüó∫Ô∏è Choisissez le type de filtrage:');
        console.log('1. üè¢  Ville ');
        console.log('2. üìÆ  D√©partement ');
        console.log('3. üåç  R√©gion ');
        
        const filterChoice = await askQuestion('\nVotre choix (1-3): ');
        
        let filterType, filterValue, filterDescription;
        
        switch (filterChoice) {
            case '1':
                filterType = 'ville';
                filterValue = await askQuestion('üè¢ Entrez le nom de la ville: ');
                filterDescription = `ville "${filterValue}"`;
                break;
                
            case '2':
                filterType = 'departement';
                filterValue = await askQuestion('üìÆ Entrez le num√©ro du d√©partement (ex: 13): ');
                if (!/^\d{1,2}$/.test(filterValue)) {
                    console.log('‚ùå Format invalide. Utilisez un num√©ro de d√©partement (ex: 13, 75, 06)');
                    return;
                }
                filterDescription = `d√©partement ${filterValue}`;
                break;
                
            case '3':
                filterType = 'region';
                filterValue = await askQuestion('üåç Entrez le nom de la r√©gion: ');
                filterDescription = `r√©gion "${filterValue}"`;
                break;
                
            default:
                console.log('‚ùå Choix invalide. Veuillez choisir 1, 2 ou 3.');
                return;
        }
        
        if (!filterValue || filterValue.trim() === '') {
            console.log('‚ùå Valeur de filtrage vide');
            return;
        }
        
        // G√©n√©rer le nom du fichier de sortie
        const inputFileName = path.basename(inputFile, '.csv');
        const outputFileName = `${inputFileName}_filtre_${filterType}_${filterValue.replace(/[^a-zA-Z0-9]/g, '_')}.csv`;
        const outputFile = path.join(outputDir, outputFileName);
        
        console.log(`\n‚úÖ Configuration du filtrage:`);
        console.log(`   üìÅ Fichier d'entr√©e: ${path.basename(inputFile)}`);
        console.log(`   üó∫Ô∏è Type: ${filterDescription}`);
        console.log(`   üìÅ Fichier de sortie: ${outputFileName}`);
        
        console.log('\nüöÄ Lancement du filtrage...\n');
        
        // Lancer le script filter_by_location.cjs
        runScript('filter_by_location.cjs', [inputFile, outputFile, filterType, filterValue]);
        
    } catch (error) {
        console.error('‚ùå Erreur lors du filtrage par localisation:', error.message);
        rl.close();
        process.exit(1);
    }
}

// Gestion de l'interruption
process.on('SIGINT', () => {
    console.log('\nüëã Interruption d√©tect√©e. Au revoir!');
    rl.close();
    process.exit(0);
});

// Lancer le programme
main(); 