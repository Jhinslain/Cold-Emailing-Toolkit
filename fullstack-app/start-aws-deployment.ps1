# Script PowerShell pour le d√©ploiement AWS sur Windows
# Ce script automatise le processus de d√©ploiement

param(
    [string]$Region = "eu-west-3",
    [string]$InstanceType = "t3.medium",
    [string]$ProjectName = "domain-processor"
)

Write-Host "üöÄ D√©marrage du d√©ploiement AWS pour $ProjectName..." -ForegroundColor Green

# V√©rifier que AWS CLI est install√©
try {
    aws --version | Out-Null
    Write-Host "‚úÖ AWS CLI d√©tect√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå AWS CLI n'est pas install√©. Veuillez l'installer d'abord." -ForegroundColor Red
    Write-Host "T√©l√©chargez-le depuis: https://aws.amazon.com/cli/" -ForegroundColor Yellow
    exit 1
}

# V√©rifier que Docker est install√©
try {
    docker --version | Out-Null
    Write-Host "‚úÖ Docker d√©tect√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n'est pas install√©. Veuillez l'installer d'abord." -ForegroundColor Red
    Write-Host "T√©l√©chargez-le depuis: https://www.docker.com/products/docker-desktop/" -ForegroundColor Yellow
    exit 1
}

# Configuration
$KeyName = "$ProjectName-key"
$SecurityGroupName = "$ProjectName-sg"
$BucketName = "$ProjectName-data-$(Get-Date -Format 'yyyyMMddHHmmss')"

Write-Host "üìã Configuration:" -ForegroundColor Cyan
Write-Host "  R√©gion: $Region" -ForegroundColor White
Write-Host "  Type d'instance: $InstanceType" -ForegroundColor White
Write-Host "  Nom du projet: $ProjectName" -ForegroundColor White
Write-Host "  Cl√© SSH: $KeyName" -ForegroundColor White
Write-Host "  Groupe de s√©curit√©: $SecurityGroupName" -ForegroundColor White
Write-Host "  Bucket S3: $BucketName" -ForegroundColor White

# Demander confirmation
$confirmation = Read-Host "`nVoulez-vous continuer avec cette configuration? (y/N)"
if ($confirmation -ne "y" -and $confirmation -ne "Y") {
    Write-Host "D√©ploiement annul√©." -ForegroundColor Yellow
    exit 0
}

# Cr√©er la cl√© SSH si elle n'existe pas
Write-Host "`nüîë V√©rification de la cl√© SSH..." -ForegroundColor Cyan
try {
    aws ec2 describe-key-pairs --key-names $KeyName --region $Region | Out-Null
    Write-Host "‚úÖ La cl√© SSH $KeyName existe d√©j√†" -ForegroundColor Green
} catch {
    Write-Host "üîÑ Cr√©ation de la cl√© SSH $KeyName..." -ForegroundColor Yellow
    aws ec2 create-key-pair --key-name $KeyName --region $Region --query 'KeyMaterial' --output text > "$KeyName.pem"
    Write-Host "‚úÖ Cl√© SSH cr√©√©e: $KeyName.pem" -ForegroundColor Green
}

# Cr√©er le groupe de s√©curit√©
Write-Host "`nüõ°Ô∏è V√©rification du groupe de s√©curit√©..." -ForegroundColor Cyan
try {
    aws ec2 describe-security-groups --group-names $SecurityGroupName --region $Region | Out-Null
    Write-Host "‚úÖ Le groupe de s√©curit√© $SecurityGroupName existe d√©j√†" -ForegroundColor Green
} catch {
    Write-Host "üîÑ Cr√©ation du groupe de s√©curit√©..." -ForegroundColor Yellow
    
    aws ec2 create-security-group `
        --group-name $SecurityGroupName `
        --description "Security group for $ProjectName" `
        --region $Region

    # Autoriser SSH
    aws ec2 authorize-security-group-ingress `
        --group-name $SecurityGroupName `
        --protocol tcp `
        --port 22 `
        --cidr 0.0.0.0/0 `
        --region $Region

    # Autoriser HTTP
    aws ec2 authorize-security-group-ingress `
        --group-name $SecurityGroupName `
        --protocol tcp `
        --port 80 `
        --cidr 0.0.0.0/0 `
        --region $Region

    # Autoriser HTTPS
    aws ec2 authorize-security-group-ingress `
        --group-name $SecurityGroupName `
        --protocol tcp `
        --port 443 `
        --cidr 0.0.0.0/0 `
        --region $Region

    # Autoriser le port de l'application
    aws ec2 authorize-security-group-ingress `
        --group-name $SecurityGroupName `
        --protocol tcp `
        --port 3001 `
        --cidr 0.0.0.0/0 `
        --region $Region

    Write-Host "‚úÖ Groupe de s√©curit√© cr√©√©" -ForegroundColor Green
}

# Cr√©er le bucket S3
Write-Host "`nü™£ Cr√©ation du bucket S3..." -ForegroundColor Cyan
aws s3 mb "s3://$BucketName" --region $Region
Write-Host "‚úÖ Bucket S3 cr√©√©: $BucketName" -ForegroundColor Green

# Construire l'image Docker
Write-Host "`nüê≥ Construction de l'image Docker..." -ForegroundColor Cyan
docker build -t $ProjectName .
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erreur lors de la construction Docker" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ Image Docker construite" -ForegroundColor Green

# Lancer l'instance EC2
Write-Host "`nüñ•Ô∏è Lancement de l'instance EC2..." -ForegroundColor Cyan

$InstanceId = aws ec2 run-instances `
    --image-id ami-0a0c8eebcdd6dcbd0 `
    --count 1 `
    --instance-type $InstanceType `
    --key-name $KeyName `
    --security-groups $SecurityGroupName `
    --region $Region `
    --user-data file://user-data.sh `
    --query 'Instances[0].InstanceId' `
    --output text

Write-Host "‚úÖ Instance EC2 cr√©√©e: $InstanceId" -ForegroundColor Green

# Attendre que l'instance soit en cours d'ex√©cution
Write-Host "`n‚è≥ Attente du d√©marrage de l'instance..." -ForegroundColor Cyan
aws ec2 wait instance-running --instance-ids $InstanceId --region $Region

# R√©cup√©rer l'IP publique
$PublicIP = aws ec2 describe-instances `
    --instance-ids $InstanceId `
    --region $Region `
    --query 'Reservations[0].Instances[0].PublicIpAddress' `
    --output text

Write-Host "‚úÖ IP publique: $PublicIP" -ForegroundColor Green

# Attendre que l'instance soit pr√™te
Write-Host "`n‚è≥ Attente que l'instance soit pr√™te (60 secondes)..." -ForegroundColor Cyan
Start-Sleep -Seconds 60

# Cr√©er le script de d√©ploiement
$DeployScript = @"
#!/bin/bash

# Se connecter √† l'instance et d√©ployer l'application
ssh -i $KeyName.pem -o StrictHostKeyChecking=no ubuntu@$PublicIP << 'REMOTE_SCRIPT'

# Mettre √† jour le syst√®me
sudo apt-get update
sudo apt-get upgrade -y

# Installer Docker et Docker Compose
sudo apt-get install -y docker.io docker-compose
sudo usermod -aG docker ubuntu

# Cr√©er le r√©pertoire de l'application
sudo mkdir -p /opt/$ProjectName
cd /opt/$ProjectName

# Copier les fichiers de l'application (√† adapter selon votre m√©thode de d√©ploiement)
# Option 1: Via Git
# git clone https://github.com/votre-username/$ProjectName.git .

# Option 2: Via SCP (√† impl√©menter)
# scp -r ../$ProjectName/* ubuntu@$PublicIP:/opt/$ProjectName/

# Construire et d√©marrer l'application
sudo docker-compose up -d --build

# Configurer le red√©marrage automatique
sudo systemctl enable docker

echo "Application d√©ploy√©e avec succ√®s!"

REMOTE_SCRIPT
"@

$DeployScript | Out-File -FilePath "deploy-to-instance.sh" -Encoding UTF8

# Cr√©er le fichier d'informations de d√©ploiement
$DeploymentInfo = @"
D√©ploiement AWS - $(Get-Date)
Instance EC2: $InstanceId
IP publique: $PublicIP
Bucket S3: $BucketName
Cl√© SSH: $KeyName.pem
Groupe de s√©curit√©: $SecurityGroupName
R√©gion: $Region

Commandes utiles:
- Connexion SSH: ssh -i $KeyName.pem ubuntu@$PublicIP
- Acc√®s web: http://$PublicIP
- Acc√®s API: http://$PublicIP:3001/api/hello
- D√©ploiement: ./deploy-to-instance.sh

Monitoring:
- CloudWatch Logs: /aws/ec2/$ProjectName
- Logs locaux: /var/log/$ProjectName/
"@

$DeploymentInfo | Out-File -FilePath "deployment-info.txt" -Encoding UTF8

# Afficher les r√©sultats
Write-Host "`nüéâ D√©ploiement termin√©!" -ForegroundColor Green
Write-Host "`nüìã Informations de d√©ploiement:" -ForegroundColor Cyan
Write-Host "  Instance EC2: $InstanceId" -ForegroundColor White
Write-Host "  IP publique: $PublicIP" -ForegroundColor White
Write-Host "  Bucket S3: $BucketName" -ForegroundColor White
Write-Host "  Cl√© SSH: $KeyName.pem" -ForegroundColor White

Write-Host "`nüîó Acc√®s √† l'application:" -ForegroundColor Cyan
Write-Host "  Interface web: http://$PublicIP" -ForegroundColor White
Write-Host "  API: http://$PublicIP:3001/api/hello" -ForegroundColor White

Write-Host "`nüìù Prochaines √©tapes:" -ForegroundColor Cyan
Write-Host "  1. Connectez-vous √† l'instance: ssh -i $KeyName.pem ubuntu@$PublicIP" -ForegroundColor White
Write-Host "  2. D√©ployez l'application: ./deploy-to-instance.sh" -ForegroundColor White
Write-Host "  3. V√©rifiez les logs: sudo docker-compose logs -f" -ForegroundColor White

Write-Host "`nüí° Conseils:" -ForegroundColor Yellow
Write-Host "  - Les informations compl√®tes sont dans deployment-info.txt" -ForegroundColor White
Write-Host "  - L'application se red√©marrera automatiquement en cas de probl√®me" -ForegroundColor White
Write-Host "  - Les sauvegardes sont automatiques tous les jours √† 2h00" -ForegroundColor White
Write-Host "  - Le monitoring est actif toutes les 5 minutes" -ForegroundColor White

Write-Host "`nüí∞ Estimation des co√ªts mensuels: $40-65" -ForegroundColor Yellow 