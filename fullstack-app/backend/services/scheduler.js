const cron = require('node-cron');
const OpendataService = require('./opendataService');
const DailyService = require('./dailyService');
const WhoisService = require('./whoisService');
const MillionVerifierService = require('./millionVerifierService');
const DeduplicationService = require('./deduplicationService');
const FileService = require('./fileService');
const StatisticsService = require('./statisticsService');
const path = require('path');

class SchedulerService {
    constructor() {
        this.opendataService = new OpendataService();
        this.dailyService = new DailyService();
        this.whoisService = new WhoisService(path.join(__dirname, '../data'));
        this.millionVerifierService = MillionVerifierService;
        this.deduplicationService = new DeduplicationService();
        this.fileService = new FileService(path.join(__dirname, '../data'));
        this.statisticsService = new StatisticsService();
        
        // V√©rifier l'initialisation du service MillionVerifier
        if (this.millionVerifierService.initializeService) {
            this.millionVerifierService.initializeService();
        }
        
        console.log('üöÄ Service de planification d√©marr√©');
    }

    // T√©l√©chargement automatique de l'Opendata (tous les 1er du mois √† 2h du matin) - D√âSACTIV√â
    /*
    scheduleOpendataDownload() {
        cron.schedule('0 2 1 * *', async () => {
            console.log('üîÑ D√©marrage du t√©l√©chargement automatique Opendata...');
            try {
                await this.opendataService.downloadAndExtractOpendata('auto');
                console.log('‚úÖ T√©l√©chargement Opendata termin√© avec succ√®s');
            } catch (error) {
                console.error('‚ùå Erreur lors du t√©l√©chargement Opendata:', error.message);
            }
        }, {
            timezone: "Europe/Paris"
        });
            
        console.log('üìÖ Job Opendata programm√©: 1er du mois √† 2h00');
    }
    */

    // T√©l√©chargement automatique du fichier de la veille + WHOIS + Million Verifier (tous les jours 6h avec retry)
    scheduleDailyYesterdayDownloadAndWhois() {
        // Programmer les 4 tentatives : 6h, 6h30, 7h, 7h30
        const retryTimes = [
            { cron: '0 6 * * *', name: '6h00' },
            { cron: '30 6 * * *', name: '6h30' },
            { cron: '0 7 * * *', name: '7h00' },
            { cron: '30 7 * * *', name: '7h30' }
        ];

        retryTimes.forEach((retryTime, index) => {
            cron.schedule(retryTime.cron, async () => {
                await this.executeDailyYesterdayDownloadAndWhoisWithRetry(index + 1, retryTime.name);
            }, {
                timezone: "Europe/Paris"
            });
        });
        
        console.log('üìÖ Jobs t√©l√©chargement + WHOIS + Million Verifier programm√©s:');
        console.log('   - 6h00 (tentative principale)');
        console.log('   - 6h30 (retry 1)');
        console.log('   - 7h00 (retry 2)');
        console.log('   - 7h30 (retry 3)');
    }

    // Ex√©cution avec retry horaire (v√©rifie si le processus est d√©j√† en cours)
    async executeDailyYesterdayDownloadAndWhoisWithRetry(attemptNumber, timeName) {
        const currentTime = new Date().toLocaleTimeString('fr-FR', { timeZone: 'Europe/Paris' });
        console.log(`üïê Tentative ${attemptNumber} √† ${timeName} (${currentTime})`);
        
        // V√©rifier si le fichier de la veille existe d√©j√† (succ√®s d'une tentative pr√©c√©dente)
        const yesterdayFile = await this.findYesterdayFile();
        if (yesterdayFile) {
            console.log(`‚úÖ Fichier de la veille d√©j√† disponible: ${yesterdayFile} - Arr√™t des tentatives`);
            return;
        }
        
        try {
            // T√©l√©chargement simple (le retry se fait via les t√¢ches cron)
            const downloadSuccess = await this.downloadOnce();
            
            if (downloadSuccess) {
                console.log(`‚úÖ T√©l√©chargement r√©ussi √† la tentative ${attemptNumber} (${timeName})`);
                
                // Continuer avec le processus WHOIS + Million Verifier
                await this.continueWithWhoisAndMillionVerifier();
                return;
            } else {
                console.warn(`‚ö†Ô∏è T√©l√©chargement √©chou√© √† la tentative ${attemptNumber} (${timeName})`);
                if (attemptNumber === 4) {
                    console.error(`‚ùå √âchec complet apr√®s 4 tentatives. Prochaine tentative demain √† 6h.`);
                } else {
                    console.log(`‚è≥ Prochaine tentative dans 30 minutes...`);
                }
            }
            
        } catch (error) {
            console.error(`‚ùå Erreur √† la tentative ${attemptNumber} (${timeName}):`, error.message);
            if (attemptNumber === 4) {
                console.error(`‚ùå √âchec complet apr√®s 4 tentatives. Prochaine tentative demain √† 6h.`);
            }
        }
    }

    // Traitement complet : WHOIS + D√©duplication + Million Verifier avec statistiques centralis√©es
    async processWhoisDedupAndMillionVerifier(yesterdayFile) {
        if (!yesterdayFile) {
            console.log('‚ÑπÔ∏è Aucun fichier de la veille trouv√© pour le WHOIS');
            return;
        }

        console.log(`üîç Lancement du WHOIS sur le fichier: ${yesterdayFile}`);
        console.log(`üìÅ V√©rification de l'existence du fichier d'entr√©e...`);
        
        // V√©rifier que le fichier d'entr√©e existe avant de lancer le WHOIS
        const fs = require('fs');
        const inputFilePath = path.join(__dirname, '../data', yesterdayFile);
        if (!fs.existsSync(inputFilePath)) {
            console.error(`‚ùå Fichier d'entr√©e introuvable: ${inputFilePath}`);
            console.warn(`üìã Fichiers disponibles dans le dossier data:`);
            const files = fs.readdirSync(path.join(__dirname, '../data'));
            files.forEach(file => console.log(`   - ${file}`));
            return;
        }
        
        console.log(`‚úÖ Fichier d'entr√©e trouv√©: ${inputFilePath}`);
        
        // === √âTAPE 1: WHOIS ===
        const whoisStartTime = Date.now();
        const whoisFileName = await this.whoisService.analyzeCsvFile(yesterdayFile);
        const whoisEndTime = Date.now();
        const whoisDuration = Math.round((whoisEndTime - whoisStartTime) / 1000);
        
        console.log(`‚úÖ WHOIS termin√© pour: ${yesterdayFile}, fichier de sortie: ${whoisFileName} (${whoisDuration}s)`);
        
        // Obtenir le nombre de lignes apr√®s WHOIS
        const whoisFilePath = path.join(__dirname, '../data', whoisFileName);
        let whoisLineCount = 0;
        if (fs.existsSync(whoisFilePath)) {
            const content = fs.readFileSync(whoisFilePath, 'utf-8');
            whoisLineCount = content.split('\n').filter(line => line.trim()).length - 1; // -1 pour l'en-t√™te
        }
        
        // Transf√©rer les statistiques du fichier source vers le fichier WHOIS
        // Le service WHOIS ne supprime plus l'ancien fichier du registre,
        // donc on peut utiliser transferStats pour pr√©server toutes les statistiques
        this.statisticsService.transferStats(yesterdayFile, whoisFileName, {
            whois_lignes: whoisLineCount,
            whois_temps: whoisDuration
        }, {
            type: 'whois',
            traitement: 'whois'
        });

        // === √âTAPE 2: D√âDUPLICATION ===
        console.log(`üîç Lancement de la d√©duplication sur le fichier WHOIS: ${whoisFileName}`);
        console.log(`‚è∞ Heure de lancement d√©duplication: ${new Date().toISOString()}`);
        
        try {
            console.log(`üìÅ Chemin complet du fichier WHOIS: ${whoisFilePath}`);
            
            // V√©rifier si le fichier WHOIS existe
            if (fs.existsSync(whoisFilePath)) {
                // V√©rifier la taille du fichier
                const stats = fs.statSync(whoisFilePath);
                const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
                console.log(`üìä Taille du fichier WHOIS: ${fileSizeInMB} MB`);
                
                console.log(`‚úÖ Fichier WHOIS trouv√©, lancement de la d√©duplication...`);
                console.log(`üöÄ [SCHEDULER] Appel du service Deduplication`);
                const dedupStartTime = Date.now();
                
                await this.deduplicationService.processCsvFile(whoisFilePath);
                
                const dedupEndTime = Date.now();
                const dedupDuration = Math.round((dedupEndTime - dedupStartTime) / 1000);
                console.log(`‚úÖ D√©duplication termin√©e en ${dedupDuration}s pour: ${whoisFileName}`);
                console.log(`‚è∞ Heure de fin d√©duplication: ${new Date().toISOString()}`);
                
                // Obtenir le nombre de lignes apr√®s d√©duplication
                let dedupLineCount = 0;
                if (fs.existsSync(whoisFilePath)) {
                    const content = fs.readFileSync(whoisFilePath, 'utf-8');
                    dedupLineCount = content.split('\n').filter(line => line.trim()).length - 1; // -1 pour l'en-t√™te
                }
                
                // Mettre √† jour les statistiques de d√©duplication
                this.statisticsService.updateFileStats(whoisFileName, {
                    dedup_lignes: dedupLineCount,
                    dedup_temps: dedupDuration
                }, {
                    type: 'deduplicated',
                    traitement: 'dedup'
                });

                // === √âTAPE 3: MILLION VERIFIER ===
                console.log(`üîç Lancement du Million Verifier sur le fichier d√©dupliqu√©...`);
                console.log(`‚è∞ Heure de lancement Million Verifier: ${new Date().toISOString()}`);
                
                try {
                    const mvStartTime = Date.now();
                    
                    await this.millionVerifierService.processCsvFile(whoisFilePath);
                    
                    const mvEndTime = Date.now();
                    const mvDuration = Math.round((mvEndTime - mvStartTime) / 1000);
                    console.log(`‚úÖ Million Verifier termin√© en ${mvDuration}s pour: ${whoisFileName}`);
                    console.log(`‚è∞ Heure de fin Million Verifier: ${new Date().toISOString()}`);
                    
                    // Le fichier final sera renomm√© avec le suffixe _verifier
                    const finalFileName = whoisFileName.replace('.csv', '_verifier.csv');
                    const finalFilePath = path.join(__dirname, '../data', finalFileName);
                    
                    // Obtenir le nombre de lignes apr√®s Million Verifier
                    let verifierLineCount = 0;
                    if (fs.existsSync(finalFilePath)) {
                        const content = fs.readFileSync(finalFilePath, 'utf-8');
                        verifierLineCount = content.split('\n').filter(line => line.trim()).length - 1; // -1 pour l'en-t√™te
                    }
                    
                    // Transf√©rer toutes les statistiques vers le fichier final
                    this.statisticsService.transferStats(whoisFileName, finalFileName, {
                        verifier_lignes: verifierLineCount,
                        verifier_temps: mvDuration
                    }, {
                        type: 'verifier',
                        traitement: 'verifier'
                    });
                    
                } catch (mvError) {
                    console.error(`‚ùå Erreur lors du Million Verifier:`, mvError.message);
                    console.error(`üìã Stack trace:`, mvError.stack);
                    console.error(`‚è∞ Heure de l'erreur Million Verifier: ${new Date().toISOString()}`);
                }
            } else {
                console.error(`‚ùå Fichier WHOIS non trouv√©: ${whoisFilePath}`);
                console.warn(`üìã Fichiers disponibles dans le dossier data:`);
                const files = fs.readdirSync(path.join(__dirname, '../data'));
                files.forEach(file => console.log(`   - ${file}`));
            }
        } catch (dedupError) {
            console.error(`‚ùå Erreur lors de la d√©duplication:`, dedupError.message);
            console.error(`üìã Stack trace:`, dedupError.stack);
            console.error(`‚è∞ Heure de l'erreur d√©duplication: ${new Date().toISOString()}`);
        }
    }

    // Continuer avec WHOIS + Million Verifier (utilise la m√©thode commune)
    async continueWithWhoisAndMillionVerifier() {
        console.log('‚úÖ Fichier de la veille t√©l√©charg√© avec succ√®s');
        const yesterdayFile = await this.findYesterdayFile();
        await this.processWhoisDedupAndMillionVerifier(yesterdayFile);
    }


    // T√©l√©chargement simple (une seule tentative par heure)
    async downloadOnce() {
        console.log(`üì• Tentative de t√©l√©chargement...`);
        
        try {
            await this.dailyService.downloadDailyFiles('yesterday');
            console.log(`‚úÖ T√©l√©chargement effectu√©`);
            
            // Utiliser findYesterdayFile pour v√©rifier que le fichier a bien √©t√© t√©l√©charg√©
            const yesterdayFile = await this.findYesterdayFile();
            
            if (yesterdayFile) {
                console.log(`‚úÖ Fichier t√©l√©charg√© avec succ√®s: ${yesterdayFile}`);
                return true;
            } else {
                console.warn(`‚ö†Ô∏è Fichier de la veille non trouv√© apr√®s t√©l√©chargement`);
                return false;
            }
            
        } catch (downloadError) {
            console.error(`‚ùå Erreur lors du t√©l√©chargement:`, downloadError.message);
            return false;
        }
    }

    // M√©thode publique pour ex√©cuter manuellement le processus complet (t√©l√©chargement + WHOIS + Million Verifier)
    // Cette fonction lance directement le processus sans passer par les t√¢ches cron programm√©es
    async executeDailyYesterdayDownloadAndWhois() {
        console.log('üîÑ EX√âCUTION MANUELLE - Lancement du processus complet (t√©l√©chargement + WHOIS + Million Verifier)...');
        console.log('‚ö†Ô∏è Mode test : ex√©cution directe sans attendre les t√¢ches cron programm√©es');
        
        try {
            // V√©rifier d'abord si le fichier existe d√©j√†
            const existingFile = await this.findYesterdayFile();
            if (existingFile) {
                console.log(`‚úÖ Fichier de la veille d√©j√† disponible: ${existingFile}`);
                console.log('üîÑ Lancement direct du traitement WHOIS + D√©duplication + Million Verifier...');
                await this.processWhoisDedupAndMillionVerifier(existingFile);
                return;
            }
            
            console.log('üì• Fichier de la veille non trouv√©, d√©marrage du t√©l√©chargement...');
            
            // T√©l√©chargement avec retry interne pour les tests manuels
            const downloadSuccess = await this.downloadWithRetryForManual(3, 10000);
            
            if (!downloadSuccess) {
                console.error('‚ùå Impossible de t√©l√©charger le fichier apr√®s plusieurs tentatives. Arr√™t du processus.');
                throw new Error('√âchec du t√©l√©chargement du fichier de la veille');
            }
            
            console.log('‚úÖ Fichier de la veille t√©l√©charg√© avec succ√®s');
            
            // Utiliser la m√©thode commune pour le traitement
            const yesterdayFile = await this.findYesterdayFile();
            await this.processWhoisDedupAndMillionVerifier(yesterdayFile);
            
            console.log('üéâ PROCESSUS MANUEL TERMIN√â AVEC SUCC√àS !');
        } catch (error) {
            console.error('‚ùå Erreur lors du processus manuel:', error.message);
            throw error; // Propager l'erreur pour la gestion c√¥t√© serveur
        }
    }

    // T√©l√©chargement avec retry pour les tests manuels (d√©lais plus courts)
    async downloadWithRetryForManual(maxRetries = 3, delayMs = 10000) {
        console.log(`üîÑ T√©l√©chargement manuel avec retry (max ${maxRetries} tentatives, d√©lai ${delayMs/1000}s)...`);
        
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            console.log(`üì• Tentative de t√©l√©chargement ${attempt}/${maxRetries}...`);
            
            try {
                await this.dailyService.downloadDailyFiles('yesterday');
                console.log(`‚úÖ T√©l√©chargement effectu√© (tentative ${attempt})`);
                
                // V√©rifier que le fichier a bien √©t√© t√©l√©charg√©
                const yesterdayFile = await this.findYesterdayFile();
                
                if (yesterdayFile) {
                    console.log(`‚úÖ Fichier t√©l√©charg√© avec succ√®s: ${yesterdayFile} (tentative ${attempt})`);
                    return true;
                } else {
                    console.warn(`‚ö†Ô∏è Fichier de la veille non trouv√© apr√®s t√©l√©chargement (tentative ${attempt}/${maxRetries})`);
                }
                
            } catch (downloadError) {
                console.error(`‚ùå Erreur lors du t√©l√©chargement (tentative ${attempt}/${maxRetries}):`, downloadError.message);
            }
            
            if (attempt < maxRetries) {
                console.log(`‚è≥ Attente de ${delayMs/1000}s avant nouvelle tentative...`);
                await new Promise(resolve => setTimeout(resolve, delayMs));
            }
        }
        
        console.error(`‚ùå √âchec du t√©l√©chargement apr√®s ${maxRetries} tentatives`);
        return false;
    }


    // Trouver le fichier de la veille
    async findYesterdayFile() {
        try {
            // Calculer la date d'hier au format YYYYMMDD
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            const year = yesterday.getFullYear();
            const month = String(yesterday.getMonth() + 1).padStart(2, '0');
            const day = String(yesterday.getDate()).padStart(2, '0');
            const yesterdayDate = `${year}${month}${day}`;
            
            // Nom du fichier attendu
            const expectedFileName = `${yesterdayDate}_domains.csv`;
            const expectedFilePath = path.join(__dirname, '../data', expectedFileName);
            
            // V√©rifier si le fichier existe
            if (require('fs').existsSync(expectedFilePath)) {
                // V√©rifier que le fichier n'est pas vide
                const stats = require('fs').statSync(expectedFilePath);
                if (stats.size > 1024) {
                    console.log(`üìÅ Fichier de la veille trouv√©: ${expectedFileName} (${(stats.size / 1024).toFixed(2)} KB)`);
                return expectedFileName;
                } else {
                    console.warn(`‚ö†Ô∏è Fichier de la veille trouv√© mais trop petit: ${expectedFileName} (${(stats.size / 1024).toFixed(2)} KB)`);
                }
            }
            
            // Si le fichier exact n'existe pas, chercher dans le registre
            const files = await this.fileService.getFilesRegistry();
            const yesterdayFiles = Object.keys(files).filter(filename => {
                const fileInfo = files[filename];
                // V√©rifier si le nom du fichier contient la date d'hier
                const containsYesterdayDate = filename.includes(yesterdayDate);
                // V√©rifier que c'est un fichier CSV de domaines (pas d√©j√† trait√© par whois)
                const isDomainsFile = filename.includes('_domains.csv') && !filename.includes('_whois');
                // V√©rifier que le fichier a √©t√© modifi√© hier
                const fileDate = new Date(fileInfo.modified);
                const isFromYesterday = fileDate.toDateString() === yesterday.toDateString();
                
                return containsYesterdayDate && isDomainsFile && isFromYesterday;
            });
            
            if (yesterdayFiles.length > 0) {
                console.log(`üìÅ Fichier de la veille trouv√© dans le registre: ${yesterdayFiles[0]}`);
                return yesterdayFiles[0];
            }
            
            console.log(`‚ÑπÔ∏è Aucun fichier trouv√© pour la date: ${yesterdayDate}`);
            console.log(`üîÑ Tentative de ret√©l√©chargement automatique...`);
            
            // Essayer de ret√©l√©charger le fichier
            const retrySuccess = await this.downloadOnce();
            if (retrySuccess) {
                // V√©rifier √† nouveau apr√®s le ret√©l√©chargement
                if (require('fs').existsSync(expectedFilePath)) {
                    const stats = require('fs').statSync(expectedFilePath);
                    if (stats.size > 1024) {
                        console.log(`‚úÖ Fichier ret√©l√©charg√© avec succ√®s: ${expectedFileName} (${(stats.size / 1024).toFixed(2)} KB)`);
                        return expectedFileName;
                    }
                }
            }
            
            return null;
            
        } catch (error) {
            console.error('‚ùå Erreur lors de la recherche du fichier de la veille:', error.message);
            return null;
        }
    }

    // Nettoyage automatique des anciens fichiers (tous les dimanches √† 3h du matin)
    scheduleDataCleanup() {
        cron.schedule('0 3 * * 0', async () => {
            console.log('üßπ D√©marrage du nettoyage automatique...');
            try {
                await this.cleanupOldFiles();
                console.log('‚úÖ Nettoyage termin√© avec succ√®s');
            } catch (error) {
                console.error('‚ùå Erreur lors du nettoyage:', error.message);
            }
        }, {
            timezone: "Europe/Paris"
        });
        
        console.log('üìÖ Job de nettoyage programm√©: tous les dimanches √† 3h00');
    }

    // Nettoyer les anciens fichiers (garder 30 jours)
    async cleanupOldFiles() {
        const fs = require('fs');
        const dataDir = path.join(__dirname, '../data');
        const tempDir = path.join(__dirname, '../temp');
        
        const cutoffDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 30 jours
        
        // Nettoyer le dossier data
        if (fs.existsSync(dataDir)) {
            const files = fs.readdirSync(dataDir);
            for (const file of files) {
                const filePath = path.join(dataDir, file);
                const stats = fs.statSync(filePath);
                
                if (stats.mtime < cutoffDate) {
                    fs.unlinkSync(filePath);
                    console.log(`üóëÔ∏è Fichier supprim√©: ${file}`);
                }
            }
        }
        
        // Nettoyer le dossier temp
        if (fs.existsSync(tempDir)) {
            const files = fs.readdirSync(tempDir);
            for (const file of files) {
                const filePath = path.join(tempDir, file);
                const stats = fs.statSync(filePath);
                
                if (stats.mtime < cutoffDate) {
                    fs.unlinkSync(filePath);
                    console.log(`üóëÔ∏è Fichier temporaire supprim√©: ${file}`);
                }
            }
        }
    }

    // M√©thode pour d√©clencher manuellement un job
    async triggerJob(jobType, options = {}) {
        console.log(`üöÄ D√©clenchement manuel du job: ${jobType}`);
        try {
            switch (jobType) {
                case 'opendata':
                    await this.opendataService.downloadAndExtractOpendata(options.mode || 'auto', options.month);
                    break;
                case 'daily':
                    await this.dailyService.downloadDailyFiles(options.mode || 'last7days', options.days);
                    break;
                case 'dailyAndWhois':
                    // T√©l√©chargement + WHOIS + Million Verifier comme dans la t√¢che cron
                    const downloadSuccess = await this.downloadOnce();
                    
                    if (!downloadSuccess) {
                        console.error('‚ùå Impossible de t√©l√©charger le fichier apr√®s plusieurs tentatives. Arr√™t du processus.');
                        throw new Error('√âchec du t√©l√©chargement du fichier de la veille');
                    }
                    
                    console.log('‚úÖ Fichier de la veille t√©l√©charg√© avec succ√®s');
                    
                    // Utiliser la m√©thode commune pour le traitement
                    const yesterdayFile = await this.findYesterdayFile();
                    await this.processWhoisDedupAndMillionVerifier(yesterdayFile);
                    break;
                case 'whois':
                    if (options.filename) {
                        await this.whoisService.analyzeCsvFile(options.filename);
                    } else if (options.yesterday) {
                        // Traitement automatique du fichier de la veille
                        const yesterdayFile = await this.findYesterdayFile();
                        if (yesterdayFile) {
                            console.log(`üîç Traitement WHOIS manuel pour le fichier de la veille: ${yesterdayFile}`);
                            await this.whoisService.analyzeCsvFile(yesterdayFile);
                            console.log(`‚úÖ WHOIS termin√© pour: ${yesterdayFile}`);
                        } else {
                            console.log('‚ÑπÔ∏è Aucun fichier de la veille trouv√© √† traiter');
                        }
                    } else {
                        console.log('‚ö†Ô∏è Nom de fichier requis ou option "yesterday" pour le traitement WHOIS');
                    }
                    break;
                case 'cleanup':
                    await this.cleanupOldFiles();
                    break;
                default:
                    throw new Error(`Type de job inconnu: ${jobType}`);
            }
            console.log(`‚úÖ Job ${jobType} termin√© avec succ√®s`);
        } catch (error) {
            console.error(`‚ùå Erreur lors du job ${jobType}:`, error.message);
            throw error;
        }
    }
}

// D√©marrer le service si ce fichier est ex√©cut√© directement
if (require.main === module) {
    const scheduler = new SchedulerService();
    // scheduler.scheduleOpendataDownload(); // D√©sactiv√© - t√©l√©chargement automatique de l'opendata
    scheduler.scheduleDailyYesterdayDownloadAndWhois();
    // scheduler.scheduleWhoisProcessing(); // D√©sactiv√© car inclus dans la t√¢che de 7h
    scheduler.scheduleDataCleanup();
    // Garder le processus en vie
    process.on('SIGINT', () => {
        console.log('üõë Arr√™t du service de planification...');
        process.exit(0);
    });
}

module.exports = SchedulerService; 