const cron = require('node-cron');
const OpendataService = require('./opendataService');
const DailyService = require('./dailyService');
const WhoisService = require('./whoisService');
const FileService = require('./fileService');
const path = require('path');

class SchedulerService {
    constructor() {
        this.opendataService = new OpendataService();
        this.dailyService = new DailyService();
        this.whoisService = new WhoisService(path.join(__dirname, '../data'));
        this.fileService = new FileService(path.join(__dirname, '../data'));
        
        console.log('üöÄ Service de planification d√©marr√©');
    }

    // D√©marrer tous les jobs programm√©s
    startAllJobs() {
        this.scheduleOpendataDownload();
        this.scheduleDailyDownload();
        this.scheduleWhoisProcessing();
        this.scheduleDataCleanup();
        
        console.log('‚úÖ Tous les jobs programm√©s ont √©t√© d√©marr√©s');
    }

    // T√©l√©chargement automatique de l'Opendata (tous les 1er du mois √† 2h du matin)
    scheduleOpendataDownload() {
        cron.schedule('0 2 1 * *', async () => {
            console.log('üîÑ D√©marrage du t√©l√©chargement automatique Opendata...');
            try {
                await this.opendataService.downloadAndExtractOpendata('auto');
                console.log('‚úÖ T√©l√©chargement Opendata termin√© avec succ√®s');
            } catch (error) {
                console.error('‚ùå Erreur lors du t√©l√©chargement Opendata:', error.message);
            }
        }, {
            timezone: "Europe/Paris"
        });
        
        console.log('üìÖ Job Opendata programm√©: 1er du mois √† 2h00');
    }

    // T√©l√©chargement quotidien (tous les jours √† 6h du matin)
    scheduleDailyDownload() {
        cron.schedule('0 6 * * *', async () => {
            console.log('üîÑ D√©marrage du t√©l√©chargement quotidien...');
            try {
                await this.dailyService.downloadDailyFiles('last7days');
                console.log('‚úÖ T√©l√©chargement quotidien termin√© avec succ√®s');
            } catch (error) {
                console.error('‚ùå Erreur lors du t√©l√©chargement quotidien:', error.message);
            }
        }, {
            timezone: "Europe/Paris"
        });
        
        console.log('üìÖ Job quotidien programm√©: tous les jours √† 6h00');
    }

    // Traitement WHOIS automatique (tous les jours √† 8h du matin)
    scheduleWhoisProcessing() {
        cron.schedule('0 8 * * *', async () => {
            console.log('üîÑ D√©marrage du traitement WHOIS automatique...');
            try {
                // R√©cup√©rer les fichiers r√©cents qui n'ont pas encore √©t√© trait√©s
                const files = await this.fileService.getFilesRegistry();
                const recentFiles = Object.keys(files).filter(filename => {
                    const fileInfo = files[filename];
                    const isRecent = new Date(fileInfo.modified) > new Date(Date.now() - 24 * 60 * 60 * 1000); // 24h
                    const notProcessed = !filename.includes('_whois');
                    const isCsv = filename.endsWith('.csv');
                    return isRecent && notProcessed && isCsv;
                });

                if (recentFiles.length > 0) {
                    console.log(`üìÅ ${recentFiles.length} fichiers r√©cents trouv√©s pour traitement WHOIS`);
                    
                    for (const filename of recentFiles) {
                        console.log(`üîç Traitement WHOIS pour: ${filename}`);
                        await this.whoisService.analyzeCsvFile(filename);
                        console.log(`‚úÖ WHOIS termin√© pour: ${filename}`);
                    }
                } else {
                    console.log('‚ÑπÔ∏è Aucun nouveau fichier √† traiter');
                }
                
            } catch (error) {
                console.error('‚ùå Erreur lors du traitement WHOIS:', error.message);
            }
        }, {
            timezone: "Europe/Paris"
        });
        
        console.log('üìÖ Job WHOIS programm√©: tous les jours √† 8h00');
    }

    // Nettoyage automatique des anciens fichiers (tous les dimanches √† 3h du matin)
    scheduleDataCleanup() {
        cron.schedule('0 3 * * 0', async () => {
            console.log('üßπ D√©marrage du nettoyage automatique...');
            try {
                await this.cleanupOldFiles();
                console.log('‚úÖ Nettoyage termin√© avec succ√®s');
            } catch (error) {
                console.error('‚ùå Erreur lors du nettoyage:', error.message);
            }
        }, {
            timezone: "Europe/Paris"
        });
        
        console.log('üìÖ Job de nettoyage programm√©: tous les dimanches √† 3h00');
    }

    // Nettoyer les anciens fichiers (garder 30 jours)
    async cleanupOldFiles() {
        const fs = require('fs');
        const dataDir = path.join(__dirname, '../data');
        const tempDir = path.join(__dirname, '../temp');
        
        const cutoffDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 30 jours
        
        // Nettoyer le dossier data
        if (fs.existsSync(dataDir)) {
            const files = fs.readdirSync(dataDir);
            for (const file of files) {
                const filePath = path.join(dataDir, file);
                const stats = fs.statSync(filePath);
                
                if (stats.mtime < cutoffDate) {
                    fs.unlinkSync(filePath);
                    console.log(`üóëÔ∏è Fichier supprim√©: ${file}`);
                }
            }
        }
        
        // Nettoyer le dossier temp
        if (fs.existsSync(tempDir)) {
            const files = fs.readdirSync(tempDir);
            for (const file of files) {
                const filePath = path.join(tempDir, file);
                const stats = fs.statSync(filePath);
                
                if (stats.mtime < cutoffDate) {
                    fs.unlinkSync(filePath);
                    console.log(`üóëÔ∏è Fichier temporaire supprim√©: ${file}`);
                }
            }
        }
    }

    // M√©thode pour d√©clencher manuellement un job
    async triggerJob(jobType, options = {}) {
        console.log(`üöÄ D√©clenchement manuel du job: ${jobType}`);
        
        try {
            switch (jobType) {
                case 'opendata':
                    await this.opendataService.downloadAndExtractOpendata(options.mode || 'auto', options.month);
                    break;
                    
                case 'daily':
                    await this.dailyService.downloadDailyFiles(options.mode || 'last7days', options.days);
                    break;
                    
                case 'whois':
                    if (options.filename) {
                        await this.whoisService.analyzeCsvFile(options.filename);
                    } else {
                        console.log('‚ö†Ô∏è Nom de fichier requis pour le traitement WHOIS');
                    }
                    break;
                    
                case 'cleanup':
                    await this.cleanupOldFiles();
                    break;
                    
                default:
                    throw new Error(`Type de job inconnu: ${jobType}`);
            }
            
            console.log(`‚úÖ Job ${jobType} termin√© avec succ√®s`);
            
        } catch (error) {
            console.error(`‚ùå Erreur lors du job ${jobType}:`, error.message);
            throw error;
        }
    }
}

// D√©marrer le service si ce fichier est ex√©cut√© directement
if (require.main === module) {
    const scheduler = new SchedulerService();
    scheduler.startAllJobs();
    
    // Garder le processus en vie
    process.on('SIGINT', () => {
        console.log('üõë Arr√™t du service de planification...');
        process.exit(0);
    });
}

module.exports = SchedulerService; 